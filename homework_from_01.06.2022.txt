[create by Jana Metz]
calculate complexity in best and worst case

Notation:
best case time B(n)
worst case time W(n)

-------------------------------------------------

void test1(int n){							
if (n==1)		
return;
for (int i=1; i<=n; i++)  //Inner loop executes only one time wegen to break statement.			
for (int j=1; j<=n; j++)
System.out.println("*");
break;						W(n) = O(n)
}

---------------------------------------------------

void test2(int n){				
int a = 0;
for (i = 0; i < n; i++)
for (j = n; j > i; j--)
a = a + i + j;					W(n) = O(n²)
}

--------------------------------------------------

void test3(int n){				
int i, j, a = 0;
for (i = n/2; i <=n; i++)
for (j = 2; j <=n; j=j*2)
a=a+n/2;					W(n) = O(n log n)
}

---------------------------------------------------

*void test4(int n){				
int a = 0, i = n;
while (i > 0) {
a += i;
i /= 2;
}						W(n) = O(log n)
}

------------------------------------------------------
доп 1,2,3
------------------------------------------------------
void method(int a, int b) {				B(n) = O(1)
        while (a != b) {				
            if (a > b) {    				
                a = a - b;				
            } else {        
                b = b - a;				W(n) = O(n)
            }
        }
    }

-------------------------------------------------------
   void method(int n) {
        for (int i = 0; i < n / 2; i++) {		B(n) = O(log n)
            for (int j = 1; j + n / 2 <= n; j++) {
                for (int k = 1; k <= n; k = k * 2) {
                    System.out.println("I am expert!");
                }
            }						W(n) = O(n²)
        }
    }

-------------------------------------------------------
void method3(int n) {					B(n) = O(n log n)				
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j = j + i) {
                System.out.println("I am expert!");
            }
        }						W(n) = O(n²)
    }
